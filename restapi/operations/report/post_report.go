// Code generated by go-swagger; DO NOT EDIT.

package report

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostReportHandlerFunc turns a function with the right signature into a post report handler
type PostReportHandlerFunc func(PostReportParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostReportHandlerFunc) Handle(params PostReportParams) middleware.Responder {
	return fn(params)
}

// PostReportHandler interface for that can handle valid post report params
type PostReportHandler interface {
	Handle(PostReportParams) middleware.Responder
}

// NewPostReport creates a new http.Handler for the post report operation
func NewPostReport(ctx *middleware.Context, handler PostReportHandler) *PostReport {
	return &PostReport{Context: ctx, Handler: handler}
}

/*PostReport swagger:route POST /report Report postReport

Post a report

Post a report

*/
type PostReport struct {
	Context *middleware.Context
	Handler PostReportHandler
}

func (o *PostReport) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostReportParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
