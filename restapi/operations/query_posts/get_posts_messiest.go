// Code generated by go-swagger; DO NOT EDIT.

package query_posts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetPostsMessiestHandlerFunc turns a function with the right signature into a get posts messiest handler
type GetPostsMessiestHandlerFunc func(GetPostsMessiestParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetPostsMessiestHandlerFunc) Handle(params GetPostsMessiestParams) middleware.Responder {
	return fn(params)
}

// GetPostsMessiestHandler interface for that can handle valid get posts messiest params
type GetPostsMessiestHandler interface {
	Handle(GetPostsMessiestParams) middleware.Responder
}

// NewGetPostsMessiest creates a new http.Handler for the get posts messiest operation
func NewGetPostsMessiest(ctx *middleware.Context, handler GetPostsMessiestHandler) *GetPostsMessiest {
	return &GetPostsMessiest{Context: ctx, Handler: handler}
}

/*GetPostsMessiest swagger:route GET /posts/messiest Query Posts getPostsMessiest

Get Messiest Posts

Get messiest posts filtered by location

*/
type GetPostsMessiest struct {
	Context *middleware.Context
	Handler GetPostsMessiestHandler
}

func (o *GetPostsMessiest) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetPostsMessiestParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
