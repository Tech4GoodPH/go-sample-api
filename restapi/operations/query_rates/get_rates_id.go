// Code generated by go-swagger; DO NOT EDIT.

package query_rates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetRatesIDHandlerFunc turns a function with the right signature into a get rates ID handler
type GetRatesIDHandlerFunc func(GetRatesIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRatesIDHandlerFunc) Handle(params GetRatesIDParams) middleware.Responder {
	return fn(params)
}

// GetRatesIDHandler interface for that can handle valid get rates ID params
type GetRatesIDHandler interface {
	Handle(GetRatesIDParams) middleware.Responder
}

// NewGetRatesID creates a new http.Handler for the get rates ID operation
func NewGetRatesID(ctx *middleware.Context, handler GetRatesIDHandler) *GetRatesID {
	return &GetRatesID{Context: ctx, Handler: handler}
}

/*GetRatesID swagger:route GET /rates/{id} Query Rates getRatesId

Get Rates, Raw

Get rates filtered by location. Raw query command will yield all rates provided by the users.

*/
type GetRatesID struct {
	Context *middleware.Context
	Handler GetRatesIDHandler
}

func (o *GetRatesID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetRatesIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
