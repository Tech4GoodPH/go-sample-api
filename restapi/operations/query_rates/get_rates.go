// Code generated by go-swagger; DO NOT EDIT.

package query_rates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetRatesHandlerFunc turns a function with the right signature into a get rates handler
type GetRatesHandlerFunc func(GetRatesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRatesHandlerFunc) Handle(params GetRatesParams) middleware.Responder {
	return fn(params)
}

// GetRatesHandler interface for that can handle valid get rates params
type GetRatesHandler interface {
	Handle(GetRatesParams) middleware.Responder
}

// NewGetRates creates a new http.Handler for the get rates operation
func NewGetRates(ctx *middleware.Context, handler GetRatesHandler) *GetRates {
	return &GetRates{Context: ctx, Handler: handler}
}

/*GetRates swagger:route GET /rates Query Rates getRates

Get Rates. This will return rates from all reports.

Get average rates filtered by location

*/
type GetRates struct {
	Context *middleware.Context
	Handler GetRatesHandler
}

func (o *GetRates) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetRatesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
